/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/

		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
public class Solution {

	public static int partition(int[] input, int startIndex, int endInedx) {
		int pivot = input[startIndex];
		int count = 0;
		for(int i = startIndex+1; i <= endInedx; i++) {
			if(input[i] <= pivot) {			// Including equal 
				count++;
			}
		}
		int pivotIndex = startIndex + count;
		input[startIndex] = input[pivotIndex];
		input[pivotIndex] = pivot;

		int i = startIndex, j = endInedx;
		while(i < j) {
			while(i <= endInedx && input[i] <= pivot) {
				i++;
			}
			while(input[j] > pivot) {
				j--;
			}
			if(i <= j) {
				int temp = input[i];
				input[i] = input[j];
				input[j] = temp;
				i++;
				j--;
			}
		}
		return pivotIndex;
	}

	public static void quickSort(int[] input, int startIndex, int endInedx) {
		if(startIndex >= endInedx) {
			return;
		}
		int partitionIndex = partition(input, startIndex, endInedx);
		quickSort(input, startIndex, partitionIndex-1);
		quickSort(input, partitionIndex+1, endInedx);
	}
	
	public static void quickSort(int[] input) {
		quickSort(input, 0, input.length - 1);
	}
	
}		
