import java.util.ArrayList;
import java.util.*;

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 *		public BinaryTreeNode(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	/*
	 * LinkedListNode Class
	 * class LinkedListNode<T> 
	 * { 
	 * 		T data; 
	 * 		LinkedListNode<T> next;
	 * 		public LinkedListNode(T data) 	
	 * 		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root){
		// Write your code here
        
        ArrayList<LinkedListNode<Integer>> ans = new ArrayList<>();
		if(root == null)
		return ans;
		Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
		q.offer(root);
		while(!q.isEmpty())
		{
			int size = q.size();
			LinkedListNode<Integer> level = new LinkedListNode<>(0);
			LinkedListNode<Integer> head = null;
			while(size-- > 0)
			{
				BinaryTreeNode<Integer> temp = q.poll();
				if(temp.left != null)
				q.add(temp.left);
				if(temp.right != null)
				q.add(temp.right);
				if(head == null)
				{
					LinkedListNode<Integer> newNode = new LinkedListNode<>(temp.data);
					level=newNode;
					head = newNode;
				}
				else
				{
				LinkedListNode<Integer> newNode = new LinkedListNode<>(temp.data);
				level.next=newNode;
				level=level.next;
				}
			}
			ans.add(head);
		}
		return ans;
	}
}

