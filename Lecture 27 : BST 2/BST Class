/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

/* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

public class BinarySearchTree {


    static BinaryTreeNode<Integer> root = null;

    public static BinaryTreeNode<Integer> insertUtil(int data, BinaryTreeNode<Integer> root) {

        if (root == null) {

            BinaryTreeNode<Integer> newNode = new BinaryTreeNode<>(data);
            return newNode;
        }

        if (root.data >= data) {
            root.left = insertUtil(data, root.left);
        }

        else {
            root.right = insertUtil(data, root.right);
        }

        return root;
    }


    public void insert(int data) {

        root = insertUtil(data, root);
    }
    public BinaryTreeNode<Integer> removeUtil(int data, BinaryTreeNode<Integer> root) {

        if (root == null) 
            return null;

        if (data == root.data) {

            if (root.left == null && root.right == null)
                return null;

            else if (root.left != null && root.right == null)
                return root.left;

            else if (root.left == null && root.right != null)
                return root.right;

            else if (root.left != null && root.right != null) {

                BinaryTreeNode<Integer> temp = root.right;

                while (temp.left != null)
                    temp = temp.left;

                root.data = temp.data;

                root.right = removeUtil(temp.data, root.right);
            }

        }

        else if (data > root.data)
            root.right = removeUtil(data, root.right);

        else
            root.left = removeUtil(data, root.left);

        return root;

    }
    public void remove(int data) {

        root = removeUtil(data, root);
    }

    public void printTree_(BinaryTreeNode<Integer> root) {

        if (root == null)
            return;

        System.out.print(root.data + ":");

        if (root.left != null) {
            System.out.print("L:" + root.left.data + ",");
        }

        if (root.right != null) {
            System.out.print("R:" + root.right.data);
        }
        System.out.println();
        printTree_(root.left);
        printTree_(root.right);
    }

    public void printTree() {
        printTree_(root);
    }

    public boolean searchUtil(BinaryTreeNode<Integer> root, int data) {

        if (root == null)
            return false;

        if (root.data == data)
            return true;

        if (root.data > data) {
            return searchUtil(root.left, data);
        }

        else {
            return searchUtil(root.right, data);
        }

    }

    public boolean search(int data) {

        return searchUtil(root, data);
    }


}
