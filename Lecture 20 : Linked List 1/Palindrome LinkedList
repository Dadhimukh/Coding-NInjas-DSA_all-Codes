/*

	Following is the Node class already written for the Linked List

	class LinkedListNode<T> {
    	T data;
    	LinkedListNode<T> next;
    
    	public LinkedListNode(T data) {
        	this.data = data;
    	}
	}

*/

public class Solution {

	private static LinkedListNode<Integer> reverseLinkedList(LinkedListNode<Integer> head) {
		LinkedListNode<Integer> curr = head;
		LinkedListNode<Integer> prev = null;
		LinkedListNode<Integer> fwd = null;

		while (curr != null) {
			fwd = curr.next;
			curr.next = prev;
			prev = curr;
			curr = fwd;
		}

		return prev;
	}

	public static boolean isPalindrome(LinkedListNode<Integer> head) {

		if (head == null || head.next == null) {
			return true;
		}

		// find list center
		LinkedListNode<Integer> fast = head;
		LinkedListNode<Integer> slow = head;

		while (fast.next != null && fast.next.next != null) {
			fast = fast.next.next;
			slow = slow.next;
		}
LinkedListNode<Integer> secondHead = slow.next;
		slow.next = null;
		secondHead = reverseLinkedList(secondHead);

		// compare two sublists now
		LinkedListNode<Integer> firstSubList = secondHead;
		LinkedListNode<Integer> secondSubList = head;
		while (firstSubList != null) {
			if (firstSubList.data != secondSubList.data) {
				return false;
			}

			firstSubList = firstSubList.next;
			secondSubList = secondSubList.next;

		}


    	//Rejoin the two sublists to restore the input list to its original form
    	firstSubList = head;
    	secondSubList = reverseLinkedList(secondHead);
    
    	while (firstSubList.next != null) {
        	firstSubList = firstSubList.next;
    	}
    
    	firstSubList.next = secondSubList;

		return true;
	}

}
