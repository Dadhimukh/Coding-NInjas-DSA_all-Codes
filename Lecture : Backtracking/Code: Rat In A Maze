
public class Solution {

	public static boolean ratInAMaze(int maze[][]){

        int row = maze.length;
        int col = maze[0].length;
        
		boolean visited[][] = new boolean[row][col];

        return ratInAMaze(maze, visited, row, col, 0, 0);
	}
    
    public static boolean ratInAMaze(int maze[][], boolean visited[][], int row, int col, int i, int j) {
    
        if (i < 0 || j < 0 || i >= row || j >= col || visited[i][j] == true || maze[i][j] == 0)
            return false;
        
        if (i == row - 1 && j == col - 1)
            return true;
        
        visited[i][j] = true;
        
        boolean top = ratInAMaze(maze, visited, row, col, i - 1, j);
        
        if (top == true)
            return true;
        
        boolean right = ratInAMaze(maze, visited, row, col, i, j + 1);
        
        if (right == true)
            return true;
        
        boolean down = ratInAMaze(maze, visited, row, col, i + 1, j);
        
        if (down == true)
            return true;
        
        boolean left = ratInAMaze(maze, visited, row, col, i, j - 1);
        
        if (left == true)
            return true;
    
        
        visited[i][j] = false;
        return false;
    }
}
