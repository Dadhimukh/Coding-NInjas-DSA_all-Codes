
import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if(child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}

		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}

	private boolean search(TrieNode root, String word) {
		if(word.length() == 0) {
			return root.isTerminating;
		}

		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];

		if(child == null) {
			return false;
		}

		return search(child,word.substring(1));

	}

	public boolean search(String word) {
		return search(root,word);
	}

	private void print(TrieNode root, String word) {
		if (root == null) {
			return;
		}
		
		if (root.isTerminating) {
			System.out.println(word);
		}
		
		for (TrieNode child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() {
		print(this.root, "");
	}





	/*..................... Palindrome Pair................... */


public boolean isPalindromePair(ArrayList<String> words) {
		for(int i=0; i<words.size(); i++){
            add(reverseWord(words.get(i)));
		}
        return Pair(root,words);
    }

	private String reverseWord(String word){
        String ans = "";
        for(int i = word.length()-1;i>=0;i--){
            ans+=word.charAt(i);
        }
        return ans;
    }
    private boolean Pair(TrieNode root, ArrayList<String> words){
        if(words.size()==0){
            return false;
        }
        for(int i=0;i<words.size();i++){
            if(pairExist(root,words.get(i),0))
                return true;
        }
        return false;
    }     
	private boolean pairExist(TrieNode root, String word ,int startIndex){
        if(word=="")
            return true;
        if(word.length()==startIndex){
            if(root.isTerminating)
                return true;
            
            return checkRemainingBranchesInTrie(root,"");
        }
        int childIndex = word.charAt(startIndex)-'a';
        TrieNode child = root.children[childIndex];

        if(child==null){
        	if(root.isTerminating)
        		return checkPallindrome(word.substring(startIndex));

        	return false;
        }
        return pairExist(child,word,startIndex+1);
    }

    
    private boolean checkRemainingBranchesInTrie(TrieNode root, String word){
    	if(root.isTerminating){
    		if(checkPallindrome(word))
    			return true;
    	}
    	for(TrieNode childNode : root.children){
    		if(childNode == null)
    			continue;
    		String fwd = word+childNode.data;
    		if(checkRemainingBranchesInTrie(childNode, fwd)){
    			return true;
    		}
        }
        return false;
    }
    
    private boolean checkPallindrome(String word){
        int i =0;
        int j = word.length()-1;
        while(i<j){
            if(word.charAt(i)!=word.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
